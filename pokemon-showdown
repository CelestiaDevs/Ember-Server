#!/usr/bin/env node
'use strict';

// Make sure we're Node 6+

try {
	eval('{ let [a] = [1]; }');
} catch (e) {
	console.log("We require Node.js v6 or later; you're using " + process.version);
	process.exit();
}

// Make sure our dependencies are available, and install them if they
// aren't

try {
	require.resolve('sockjs');
} catch (e) {
	let command = 'npm install --production';
	console.log('Installing dependencies: `' + command + '`...');
	require('child_process').spawnSync('sh', ['-c', command], {stdio: 'inherit'});
}

let config = (function () {
	try {
		require.resolve('./config/config');
	} catch (err) {
		if (err.code !== 'MODULE_NOT_FOUND') throw err; // should never happen

		// Copy it over synchronously from config-example.js since it's needed before we can start the server
		console.log("config.js doesn't exist - creating one with default settings...");
		fs.writeFileSync(path.resolve(__dirname, 'config/config.js'),
			fs.readFileSync(path.resolve(__dirname, 'config/config-example.js'))
		);
	} finally {
		return require('./config/config');
	}
})();

let cliConfig = require.main === module ? require('./cli')(process.argv.slice(2)) : null;
Object.assign(config, cliConfig);

require('./app').listen(Config.port, undefined, undefined, {
	devPort: config.localhost,
	staticPath: config.staticserver
});
